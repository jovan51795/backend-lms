/*
 * This file is generated by jOOQ.
 */
package biz.global.service;


import biz.global.Table.Keys;
import biz.global.Table.Public;
import biz.global.Table.tables.records.SubjectDetailHistoryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubjectDetailHistory extends TableImpl<SubjectDetailHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.subject_detail_history</code>
     */
    public static final SubjectDetailHistory SUBJECT_DETAIL_HISTORY = new SubjectDetailHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubjectDetailHistoryRecord> getRecordType() {
        return SubjectDetailHistoryRecord.class;
    }

    /**
     * The column <code>public.subject_detail_history.session_id</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, Long> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.subject_detail_history.academic_year</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, String> ACADEMIC_YEAR = createField(DSL.name("academic_year"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.subject_detail_history.active_deactive</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, Boolean> ACTIVE_DEACTIVE = createField(DSL.name("active_deactive"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.subject_detail_history.schedule</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, String> SCHEDULE = createField(DSL.name("schedule"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.subject_detail_history.section</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, String> SECTION = createField(DSL.name("section"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.subject_detail_history.sem</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, String> SEM = createField(DSL.name("sem"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.subject_detail_history.status</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.subject_detail_history.year_level</code>.
     */
    public final TableField<SubjectDetailHistoryRecord, String> YEAR_LEVEL = createField(DSL.name("year_level"), SQLDataType.VARCHAR(255), this, "");

    private SubjectDetailHistory(Name alias, Table<SubjectDetailHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubjectDetailHistory(Name alias, Table<SubjectDetailHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.subject_detail_history</code> table reference
     */
    public SubjectDetailHistory(String alias) {
        this(DSL.name(alias), SUBJECT_DETAIL_HISTORY);
    }

    /**
     * Create an aliased <code>public.subject_detail_history</code> table reference
     */
    public SubjectDetailHistory(Name alias) {
        this(alias, SUBJECT_DETAIL_HISTORY);
    }

    /**
     * Create a <code>public.subject_detail_history</code> table reference
     */
    public SubjectDetailHistory() {
        this(DSL.name("subject_detail_history"), null);
    }

    public <O extends Record> SubjectDetailHistory(Table<O> child, ForeignKey<O, SubjectDetailHistoryRecord> key) {
        super(child, key, SUBJECT_DETAIL_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<SubjectDetailHistoryRecord, Long> getIdentity() {
        return (Identity<SubjectDetailHistoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubjectDetailHistoryRecord> getPrimaryKey() {
        return Keys.SUBJECT_DETAIL_HISTORY_PKEY;
    }

    @Override
    public List<UniqueKey<SubjectDetailHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<SubjectDetailHistoryRecord>>asList(Keys.SUBJECT_DETAIL_HISTORY_PKEY);
    }

    @Override
    public SubjectDetailHistory as(String alias) {
        return new SubjectDetailHistory(DSL.name(alias), this);
    }

    @Override
    public SubjectDetailHistory as(Name alias) {
        return new SubjectDetailHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubjectDetailHistory rename(String name) {
        return new SubjectDetailHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubjectDetailHistory rename(Name name) {
        return new SubjectDetailHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, Boolean, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
